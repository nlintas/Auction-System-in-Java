//Donat Salihu
//Nikolaos Lintas
//Memli Restelica
//Philippos Kalatzis
package Client;

import Client.Controllers.AuctionController;
import Client.Controllers.BidController;
import Client.Controllers.MyAuctionsController;
import Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException;
import Packets.PacketMessage;
import Payload.AuctionListPayload;
import Payload.AuctionUpdatePayload;
import Payload.ConcludeAuctionPayload;
import Payload.ConfirmAuctionCancellationPayload;
import Payload.ConfirmAuctionRegistrationPayload;
import Payload.ErrorMessagePayload;
import Payload.FirstCountdownPayload;
import Payload.NotifyAuctionWinnerPayload;
import Payload.NotifyNoAuctionWinnerPayload;
import Payload.SecondCountdownPayload;
import Payload.SendAuctionIDPayload;
import Payload.SendAuctionPayload;
import Payload.SendHighestBidPayload;
import Payload.UnregisterClientPayload;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.concurrent.Semaphore;
import javafx.beans.property.SimpleStringProperty;
import javafx.beans.property.StringProperty;

public class ServerConnection extends Thread {

  //Attributes
  private Socket socket;
  private boolean isListening;
  private ObjectInputStream input;
  private ObjectOutputStream output;
  private static StringProperty consoleMessage = new SimpleStringProperty("");

  //Constructor
  public ServerConnection(String ip, int port) {
    isListening = false;

    try {
      socket = new Socket(ip, port);
      output = new ObjectOutputStream(socket.getOutputStream());

    } catch (IOException e) {
      e.printStackTrace();
    }
  }

  public Socket getSocket() {
    return socket;
  }

  public void setSocket(Socket socket) {
    this.socket = socket;
  }

  public boolean isListening() {
    return isListening;
  }

  public void setListening(boolean listening) {
    isListening = listening;
  }

  public ObjectInputStream getInput() {
    return input;
  }

  public void setInput(ObjectInputStream input) {
    this.input = input;
  }

  public ObjectOutputStream getOutput() {
    return output;
  }

  public void setOutput(ObjectOutputStream output) {
    this.output = output;
  }

  public static String getConsoleMessage() {
    return consoleMessage.get();
  }

  public static StringProperty consoleMessageProperty() {
    return consoleMessage;
  }

  public static void setConsoleMessage(String consoleMessage) {
    ServerConnection.consoleMessage.set(consoleMessage);
  }

  //Methods
  public void stopListening() {
    isListening = false;
  }

  public void startListening() {
    isListening = true;
  }

  public void sendNotification(String notification) {
    consoleMessage.setValue(consoleMessage.getValue() + "\n" + notification);
  }

  public void sendPacket(PacketMessage packetMessage) throws IOException {
    output.writeObject(packetMessage);
  }

  /**
   * <p>This method is generated by the Thread superclass that is used to execute the thread
   * ServerConnection. This method first initializes the object input stream that is used to recieve
   * messages from the Server. It will enter a loop while the connection is open for receiving
   * messages from the Server. The message recieved are by definition of the Application Protocol a
   * PacketMessage containg a MessageType and Payload from the "Payloads" package. The input object
   * stream casts to the PacketMessage and searches for the MessageType. The switch case contains
   * all the cases that the PacketMessage might contain. For each case the right payload is checked
   * and the requested method is called.
   * </p>
   *
   * @see java.lang.System#getProperty(java.lang.String)
   * @see Semaphore
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void run() {

    try {
      input = new ObjectInputStream(socket.getInputStream());
      isListening = true;
    } catch (IOException e) {
      e.printStackTrace();
    }

    while (isListening) {

      try {

        PacketMessage packetMessage = (PacketMessage) input.readObject();

        switch (packetMessage.getType()) {

          case UNREGISTER_FROM_AUCTION:
            try {
              unregisteredFromAuction(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case AUCTION_CANCELLED:
            try {
              auctionCanceled(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case SEND_HIGHEST_BID:
            try {
              highestBidReceived(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case AUCTION_UPDATE:
            try {
              auctionUpdate(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case SEND_AUCTION:
            try {
              auctionReceived(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case SEND_AUCTION_ID:
            try {
              auctionIDReceived(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case WELCOME_MESSAGE:
            serverWelcome();
            break;

          case SEND_ACTIVE_AUCTION_LIST:
            try {
              receivedAuctionList(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case ERROR:
            try {
              errorReceived(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case AUCTION_CONCLUDED:
            try {
              auctionConcluded(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case NOTIFY_AUCTION_WINNER:
            try {
              auctionWon(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case NOTIFY_NO_AUCTION_WINNER:
            try {
              auctionNoWinner(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case COUNTDOWN_ONCE:
            try {
              firstCountdown(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case COUNTDOWN_TWICE:
            try {
              secondCountdown(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case SEND_MY_AUCTIONS:
            try {
              receivedMyAuctionsList(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case CONFIRM_AUCTION_REGISTRATION:
            try {
              registeredToAuction(packetMessage);
            } catch (ServerConnectionUnexpectedPayloadException e) {
              e.printStackTrace();
            }
            break;

          case HIGHEST_BID_OWNER_LOST:
            // errorReceived(packetMessage);
            break;

          default:
            //code block
            break;

        }
      } catch (IOException |
          ClassNotFoundException e) {
        isListening = false;

        try {
          socket.close();
          System.exit(0);
        } catch (IOException ioException) {
          ioException.printStackTrace();
        }
      }
    }
  }

  /**
   * <p>This method accepts the packetMessage that is casted into the UnregisteredPauload. A message
   * will appear in the console for
   * informing the user about the unregistration.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void unregisteredFromAuction(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {
    //check if the packetMessage is the correct payload
    if (packetMessage.getPayload() instanceof UnregisterClientPayload) {
      UnregisterClientPayload unregisterPayload = (UnregisterClientPayload) packetMessage
          .getPayload();
      //send the notifications to the user via the console
      sendNotification("The client has been unregistered successfully from the auction with ID: "
          + unregisterPayload.getAuctionID());
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p>This method will send the confirmation to the user in the console that the auction has beedn
   * canceled
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * <p>
   * java.lang.String)
   */
  public void auctionCanceled(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {
    //check if the packetMessage is the correct payload
    if (packetMessage.getPayload() instanceof ConfirmAuctionCancellationPayload) {
      ConfirmAuctionCancellationPayload auctionConfirmationPayload = (ConfirmAuctionCancellationPayload) packetMessage
          .getPayload();
      //send the notifications to the user via the console
      sendNotification("The auction: " + auctionConfirmationPayload.getAuctionID()
          + "was canceled by the owner");
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p>This method will accept the highestBidPayload that contains the user and the bid that appears as
   * the winning bidder for the moment. The method will check if there are no bids in the auction and update the
   * data in the tablView from the BidController.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * @see BidController#setAuctionBid(SendAuctionPayload)
   * @see BidController#setHighestBidRefresh(float)
   * <p>
   * java.lang.String)
   */
  public void highestBidReceived(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof SendHighestBidPayload) {
      SendHighestBidPayload highestBidPayload = (SendHighestBidPayload) packetMessage.getPayload();
      BidController.setHighestBidRefresh(highestBidPayload.getHighestBid());
      BidController.getBidRefreshSemaphore().release();
      //Make check if the  highest bid is null
      if (highestBidPayload.getHighestBidderIP() == null) {
        BidController.setBidderIp(null);
        setConsoleMessage("No new Highest Bid");
        sendNotification("The auction " + highestBidPayload.getAuctionID()
            + " with the highest  bid being " + highestBidPayload.getHighestBid()
            + " \n has not changed since the last refresh");
      } else {
        sendNotification("The auction with ID: " + highestBidPayload.getAuctionID()
            + " currently has the highest bid of: " + highestBidPayload.getHighestBid()
            + ",\n the bid was created on : " + highestBidPayload.getBidCreationDate()
            + " by the client with IP: " + highestBidPayload.getHighestBidderIP());
      }


    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p>This method accepts the auction that is send to the client to for registration. The loaded auction is
   * presented in the
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * @see BidController#setAuctionBid(SendAuctionPayload)
   * @see BidController#setHighestBidRefresh(float)
   * <p>
   * java.lang.String)
   */
  public void auctionReceived(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {
    if (packetMessage.getPayload() instanceof SendAuctionPayload) {
      SendAuctionPayload auctionPayload = (SendAuctionPayload) packetMessage.getPayload();
      BidController.setAuctionBid(auctionPayload);
        BidController.getBidLoadSemaphore().release();
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }
  /**
   * <p>The method updates all the auctions that come from the server. Whe the user makes a bid a confirmation will be returned
   * for the confirmation.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * @see BidController#setAuctionBid(SendAuctionPayload)
   * @see BidController#setHighestBidRefresh(float)
   * <p>
   * java.lang.String)
   */
  public void auctionUpdate(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof AuctionUpdatePayload) {
      AuctionUpdatePayload auctionUpdatePayload = (AuctionUpdatePayload) packetMessage.getPayload();
      BidController.getBidSubmitSemaphore().release();
      sendNotification(
          "The auction with ID: " + auctionUpdatePayload.getAuctionID() + " with the item: "
              + auctionUpdatePayload.getItemName() + " received a new bid: "
              + auctionUpdatePayload.getHighestBid() + " by this client with an IP of: "
              + auctionUpdatePayload.getHighestBidderIP());

    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }
  /**
   * <p>Updates the user with the information when the Auction is Created. User creates an auction and
   * the console updates its information.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * @see BidController#setAuctionBid(SendAuctionPayload)
   * @see BidController#setHighestBidRefresh(float)
   * <p>
   * java.lang.String)
   */
  public void auctionIDReceived(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof SendAuctionIDPayload) {

      SendAuctionIDPayload sendAuctionIDPayload = (SendAuctionIDPayload) packetMessage.getPayload();
      sendNotification(
          "Auction Created, The auction ID is: " + sendAuctionIDPayload.getAuctionID());
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }


  public void serverWelcome() {
    sendNotification("Welcome to the program!, you have successfully connected to the server");
  }

  /**
   * <p>The method updates all the auctions that come from the server. Whe the user makes a bid a confirmation will be returned
   * for the confirmation.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * @see BidController#setAuctionBid(SendAuctionPayload)
   * @see BidController#setHighestBidRefresh(float)
   * <p>
   * java.lang.String)
   */
  public void receivedAuctionList(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {
    AuctionListPayload auctionListPayload = (AuctionListPayload) packetMessage.getPayload();
    AuctionController.getLiveAuctionsSemaphore().release();
    AuctionController.setAuctionsReceived(auctionListPayload);

  }

  /**
   * <p>This method receives all the auctions that are loaded in the AuctionController by requesting
   * the live auctions that
   * are in the server. It uses the Payload AuctionListPayload that is casted and put in the
   * acutions table.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * @see Client.ServerConnectionException.ServerConnectionUnexpectedPayloadException
   * @see BidController#setAuctionBid(SendAuctionPayload)
   * @see BidController#setHighestBidRefresh(float)
   * <p>
   * java.lang.String)
   */
  public void receivedMyAuctionsList(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {
    //Check the correct payload
    if (packetMessage.getPayload() instanceof AuctionListPayload) {
      //Cast to appropriate packet
      AuctionListPayload myActionsListPayload = (AuctionListPayload) packetMessage.getPayload();
      //Set the auctions to be completed.
      MyAuctionsController.setAuctionsReceived(myActionsListPayload);
      //Release the semaphore that blocks the loading
      MyAuctionsController.getMyAuctionsSemaphore().release();
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p> This method receives all the auctions that are to be displayed in the console.
   * For each error it will append in the notifications console with the other messages.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void errorReceived(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof ErrorMessagePayload) {
      // cast to appropriate Package
      ErrorMessagePayload errorMessagePayload = (ErrorMessagePayload) packetMessage.getPayload();
      //add to console
      sendNotification(errorMessagePayload.getErrorMessage());
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p> The method displays the first notification of the  auction. When the auctions
   * reaches its end it will send a message to this method that will print out the warning for
   * ending the Auction.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void firstCountdown(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof FirstCountdownPayload) {

      FirstCountdownPayload firstCountdownPayload = (FirstCountdownPayload) packetMessage
          .getPayload();
      //send notification of Going once
      sendNotification(
          "Last bid for auction with ID: " + firstCountdownPayload.getAuctionID() + "  with Item: "
              + firstCountdownPayload.getItemName() + " with highest price: "
              + firstCountdownPayload.getHighestBid() + ", Going once...");
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p> The method displays the first notification of the  auction. When the auctions
   * reaches its end it will send a message to this method that will print out the warning for
   * ending the Auction.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void secondCountdown(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof SecondCountdownPayload) {
      //send the second Warning
      sendNotification(
          "Auction with ID: " + ((SecondCountdownPayload) packetMessage.getPayload()).getAuctionID()
              + ", Going twice...");
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p> Send the notification for the concliuded Auction. The server sends the message to all the
   * users
   * that the auction has been concluded.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void auctionConcluded(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof ConcludeAuctionPayload) {
      ConcludeAuctionPayload concludeAuctionPayload = (ConcludeAuctionPayload) packetMessage
          .getPayload();
      sendNotification("Auction with ID: " + concludeAuctionPayload.getAuctionID() + "Sold Item: "
          + concludeAuctionPayload.getItemName() + " for the price: " + concludeAuctionPayload
          .getHighestBid() + " to participant with IP address: " + concludeAuctionPayload
          .getHighestBidderIP());

    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p> The method sends the notification to the user that he has won the auction.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  public void auctionWon(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof NotifyAuctionWinnerPayload) {
      NotifyAuctionWinnerPayload notifyAuctionWinnerPayload = (NotifyAuctionWinnerPayload) packetMessage
          .getPayload();
      //send winning message
      sendNotification("You won the auction with ID: " + notifyAuctionWinnerPayload.getAuctionID()
          + " for the item " + notifyAuctionWinnerPayload.getItemName());
    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  public void auctionNoWinner(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof NotifyNoAuctionWinnerPayload) {
      NotifyNoAuctionWinnerPayload notifyNoAuctionWinnerPayload = (NotifyNoAuctionWinnerPayload) packetMessage
          .getPayload();
      sendNotification("The auction with ID: " + notifyNoAuctionWinnerPayload.getAuctionID()
          + " has no winners for the item: " + notifyNoAuctionWinnerPayload.getItemName()
          + " with a starting price of: " + notifyNoAuctionWinnerPayload.getItemStartingPrice());

    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }

  /**
   * <p> The method sends the notification to the user that the auction he just clicked on he is
   * registered and will recieve notifications for
   * the auction. The notification is posted on the console.
   * </p>
   *
   * @param packetMessage PacketMessage
   * @see PacketMessage
   * @see Packets.MessageType
   * <p>
   * java.lang.String)
   */
  private void registeredToAuction(PacketMessage packetMessage)
      throws ServerConnectionUnexpectedPayloadException {

    if (packetMessage.getPayload() instanceof ConfirmAuctionRegistrationPayload) {
      ConfirmAuctionRegistrationPayload registeredPayload = (ConfirmAuctionRegistrationPayload) packetMessage
          .getPayload();
      sendNotification("Registered in the auction with ID: " + registeredPayload.getAuctionID());

    } else {
      throw new ServerConnectionUnexpectedPayloadException(
          "The packet provided an unexpected payload");
    }
  }
}